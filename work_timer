import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'dart:async';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({
    Key? key,
    required this.title,
  }) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> with TickerProviderStateMixin{
  final myora = TextEditingController();
  final myperc = TextEditingController();
  final mymasodp = TextEditingController();

  bool _isRunning = false;
  int hour = 0;
  int min = 0;
  int sec = 0;
  String szoveg = "";
  String tuloraig = "";
  void _incrementCounter() {
    setState(() {
      !_isRunning;
    });
  }

  DateTime today = DateTime.now();

  void _addItem() {
    final endtime = DateTime(
        today.year,
        today.month,
        today.day,
        int.parse(myora.text) + 8,
        int.parse(myperc.text) + 40,
        int.parse(mymasodp.text));
    final overtime = DateTime(
        today.year,
        today.month,
        today.day,
        int.parse(myora.text) + 9,
        int.parse(myperc.text),
        int.parse(mymasodp.text));
    final DateTime now = DateTime.now();

    if (myora.text.isNotEmpty &&
        myperc.text.isNotEmpty &&
        mymasodp.text.isNotEmpty) {
      setState(() {
        szoveg = now.difference(endtime).abs().toString();
        hour = now.difference(endtime).inHours.abs() % 24;
        min = now.difference(endtime).inMinutes.abs() % 60;
        sec = now.difference(endtime).inSeconds.abs() % 60;
        tuloraig = now.difference(overtime).abs().toString();
      });
    }
  }

  @override
  void initState() {
     myora.text = "7";
   myperc.text = "12";
   mymasodp.text = "2";
    _isRunning = true;
    Timer.periodic(Duration(seconds: 1), (Timer timer) {
      if (!_isRunning) {
        timer.cancel();
      }
      _addItem();
    });
    super.initState();
  }

  DateTime now = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Column(
        children: [
          Text('Beérkezés ideje'),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: <Widget>[
              Flexible(
                child: TextField(
                  decoration: const InputDecoration(
                      border: OutlineInputBorder(), hintText: 'Ora:'),
                  controller: myora,
                ),
              ),
              SizedBox(
                width: 20.0,
              ),
              Flexible(
                child: TextField(
                  decoration: const InputDecoration(
                      border: OutlineInputBorder(), hintText: 'Perc'),
                  controller: myperc,
                ),
              ),
              SizedBox(
                width: 20.0,
              ),
              Flexible(
                child: TextField(
                  decoration: const InputDecoration(
                      border: OutlineInputBorder(), hintText: 'Masodperc'),
                  controller: mymasodp,
                ),
              ),
            ],
          ),
          Row(mainAxisAlignment: MainAxisAlignment.center, children: [
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 500),
              transitionBuilder: (Widget child, Animation<double> animation) {
                return ScaleTransition(child: child, scale: animation);
              },
              child: Text(
                '$hour : ',
                // This key causes the AnimatedSwitcher to interpret this as a "new"
                // child each time the count changes, so that it will begin its animation
                // when the count changes.
                key: ValueKey<int>(hour),
                style: Theme.of(context).textTheme.headline4,
              ),
            ),
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 500),
              transitionBuilder: (Widget child, Animation<double> animation) {
                return ScaleTransition(child: child, scale: animation);
              },
              child: Text(
                '$min : ',
                // This key causes the AnimatedSwitcher to interpret this as a "new"
                // child each time the count changes, so that it will begin its animation
                // when the count changes.
                key: ValueKey<int>(min),
                style: Theme.of(context).textTheme.headline4,
              ),
            ),
            AnimatedSwitcher(
              duration: const Duration(milliseconds: 500),
              transitionBuilder: (Widget child, Animation<double> animation) {
              // 1.
  final offsetAnimation = Tween(
    begin: const Offset(0.0, 1.0),
    end: const Offset(0.0, 0.0),
  ).animate(animation);
  // 3.
  return ClipRect(
    // 2.
    child: SlideTransition(
      position: offsetAnimation,
      child: child,
    ),
  );
},
              child: Text(
                '$sec',
                // This key causes the AnimatedSwitcher to interpret this as a "new"
                // child each time the count changes, so that it will begin its animation
                // when the count changes.
                key: ValueKey<int>(sec),
                style: Theme.of(context).textTheme.headline4,
              ),
            ),
          ]),
          //   Text('munka vége: $szoveg'),
          Text('túlóráig vissza: $tuloraig'),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: const Icon(Icons.add),
      ),
    );
  }
}
