// Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:flutter/material.dart';
import 'dart:math';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({
    Key? key,
    required this.title,
  }) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  num number = 0.0;
  double min = 0.0;
  double value = 0;
  var rnd = Random();
  List<num> lista = [];
  List<num> toplist = [];

  final myc1 = TextEditingController(text: '1');
  final myc2 = TextEditingController(text: '100');
  final myc3 = TextEditingController(text: '1');
  final myc4 = TextEditingController(text: '10');

  void randomgen(double inmin, double inmax) {
    for (int a = 0; a < 100; a++) {
      double sum = 0;
      List<double> avglist = [];
      for (int i = 0; i < int.parse(myc3.text); i++) {
        avglist.add(doubleInRange(rnd, inmin, inmax));
      }
      for (var i = 0; i < avglist.length; i++) {
        sum += avglist[i];
      }
      value = sum / avglist.length;
      lista.add(value);
    }
    toppos(lista);
    setState(() {});
  }

  double doubleInRange(Random source, num start, num end) {
    return start + (source.nextDouble() * (end - start));
  }

  void toppos(List value) {
    double iter = 0;
    List<int> ranges = List<int>.generate(
        int.parse(myc4.text)+1, (i) => i = i * (int.parse(myc2.text) / int.parse(myc4.text)).round());
    toplist.clear();
    lista.sort();
    toplist = List<int>.generate(value.length, (i) => i + 1);
    for (int k = 0; k < ranges.length; k++) {
      iter = 1;
      for (int j = 0; j < toplist.length; j++) {
        if (value[j] > ranges[k] && value[j] < ranges[k + 1]) {
          iter++;
          toplist[j] = iter;
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('$value'),
      ),
      body: Stack(children: [
        for (int i = 0; i < lista.length; i++)
          Positioned(
              bottom: toplist[i].toDouble(),
              left: lista[i].toDouble(),
              child: (Container(color: Colors.black, width: 3, height: 3))),
        Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
              const Text('Start: '),
              Container(
                  width: 50,
                  child: TextField(
                    controller: myc1,
                  )),
              const Text('End: '),
              Container(
                  padding: const EdgeInsets.all(10),
                  width: 50,
                  child: TextField(
                    controller: myc2,
                  )),
              const Text('Weight: '),
              Container(
                  width: 50,
                  child: TextField(
                    controller: myc3,
                  )),
              const Text('Resolution: '),
              Container(
                  padding: const EdgeInsets.all(10),
                  width: 50,
                  child: TextField(
                    controller: myc4,
                  )),
              ElevatedButton(
                child: const Text('Delete'),
                onPressed: () {
                  setState(() {
                    lista.clear();
                  });
                }),
            ]),
            
          ],
        ),
      ]),
      floatingActionButton: FloatingActionButton(
        onPressed: () =>
            randomgen(double.parse(myc1.text), double.parse(myc2.text)),
        tooltip: 'Generate',
        child: const Icon(Icons.add),
      ),
    );
  }
}
