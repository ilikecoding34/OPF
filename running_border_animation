import 'package:flutter/material.dart';
import 'dart:math' as math;

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static const String _title = 'Flutter Code Sample';

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: _title,
      home: MyStatefulWidget(
          borderwidth: 10.0,
          linewidth: 50,
          boxradius: 10,
          boxwidth: 400,
          boxheight: 100),
    );
  }
}

class MyStatefulWidget extends StatefulWidget {
  const MyStatefulWidget(
      {super.key,
      required this.borderwidth,
      required this.linewidth,
      required this.boxradius,
      required this.boxwidth,
      required this.boxheight});

  final double borderwidth;
  final double boxwidth;
  final double boxradius;
  final double boxheight;
  final double linewidth;

  @override
  State<MyStatefulWidget> createState() => _MyStatefulWidgetState();
}

/// AnimationControllers can be created with `vsync: this` because of TickerProviderStateMixin.
class _MyStatefulWidgetState extends State<MyStatefulWidget>
    with TickerProviderStateMixin {
  late final AnimationController _controller = AnimationController(
    duration: const Duration(seconds: 4),
    vsync: this,
  )..repeat(reverse: false);
  late final Animation<double> _animation = CurvedAnimation(
    parent: _controller,
    curve: Curves.linear,
  );

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double linesize = widget.boxheight >= widget.boxwidth
        ? widget.boxheight * 1.4
        : widget.boxwidth * 1.4;
    return Scaffold(
        body: ClipRRect(
            borderRadius: BorderRadius.circular(widget.boxradius),
            child: Container(
                width: widget.boxwidth,
                height: widget.boxheight,
                child: Stack(children: [
                  Positioned(
                    top: 0,
                    left: 0,
                    child: Container(
                      color: Colors.blue,
                      width: widget.boxwidth,
                      height: widget.boxheight,
                    ),
                  ),
                  Positioned(
                    top: (widget.boxheight - linesize) / 2,
                    left: (widget.boxwidth - linesize) / 2,
                    child: Container(
                      width: linesize,
                      height: linesize,
                      child: RotationTransition(
                        turns: _animation,
                        child: Stack(children: [
                          Container(
                            width: linesize,
                            height: linesize,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(20),
                              gradient: const SweepGradient(
                                colors: [
                                  Colors.transparent,
                                  Colors.transparent,
                                  Colors.transparent,
                                  Colors.transparent,
                                  Colors.black,
                                ],
                                stops: <double>[0.0, 0.25, 0.5, 0.75, 1.0],
                                tileMode: TileMode.clamp,
                              ),
                            ),
                          ),
                          Transform.rotate(
                              angle: -math.pi,
                              child: Container(
                                width: linesize,
                                height: linesize,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(20),
                                  gradient: const SweepGradient(
                                    colors: [
                                      Colors.transparent,
                                      Colors.transparent,
                                      Colors.transparent,
                                      Colors.transparent,
                                      Colors.black,
                                    ],
                                    stops: <double>[0.0, 0.25, 0.5, 0.75, 1.0],
                                    tileMode: TileMode.clamp,
                                  ),
                                ),
                              ))
                        ]),
                      ),
                    ),
                  ),
                  Positioned(
                    top: (widget.borderwidth / 2) - 1,
                    left: (widget.borderwidth / 2) - 1,
                    child: Container(
                      width: widget.boxwidth - widget.borderwidth,
                      height: widget.boxheight - widget.borderwidth,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(widget.boxradius),
                        color: Colors.blue,
                      ),
                    ),
                  ),
                ]))));
  }
}
