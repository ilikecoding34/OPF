import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static const String _title = 'Flutter Code Sample';

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(
      title: _title,
      home: MyStatefulWidget(
          borderwidth: 10.0, linewidth: 50, boxradius: 10, boxwidth: 250, boxheight: 400),
    );
  }
}

class MyStatefulWidget extends StatefulWidget {
  const MyStatefulWidget(
      {super.key,
      required this.borderwidth,
      required this.linewidth,
      required this.boxradius,
      required this.boxwidth,
      required this.boxheight});

  final double borderwidth;
  final double boxwidth;
  final double boxradius;
  final double boxheight;
  final double linewidth;

  @override
  State<MyStatefulWidget> createState() => _MyStatefulWidgetState();
}

/// AnimationControllers can be created with `vsync: this` because of TickerProviderStateMixin.
class _MyStatefulWidgetState extends State<MyStatefulWidget>
    with TickerProviderStateMixin {
  late final AnimationController _controller = AnimationController(
    duration: const Duration(seconds: 4),
    vsync: this,
  )..repeat(reverse: false);
  late final Animation<double> _animation = CurvedAnimation(
    parent: _controller,
    curve: Curves.linear,
  );

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    double linesize = widget.boxheight >= widget.boxwidth
        ? widget.boxheight
        : widget.boxwidth;
    return Scaffold(
        body: ClipRRect(
            borderRadius: BorderRadius.circular(widget.boxradius),
            child: Container(
                width: widget.boxwidth,
                height: widget.boxheight,
                child: Stack(children: [
                  Positioned(
                    top: 0,
                    left: 0,
                    child: Container(
                      color: Colors.blue,
                      width: widget.boxwidth,
                      height: widget.boxheight,
                    ),
                  ),
                  Positioned(
                    top: (widget.boxheight - (widget.linewidth * 2)) / 2,
                    left: -linesize + (widget.boxwidth / 2),
                    child: Container(
                      width: linesize * 2,
                      height: widget.linewidth * 2,
                      child: RotationTransition(
                        turns: _animation,
                        child: Stack(children: [
                          Positioned(
                              top: 0,
                              left: 0,
                              child: Container(
                                  width: linesize,
                                  height: widget.linewidth,
                                  decoration: const BoxDecoration(
                                      gradient: LinearGradient(
                                    colors: [Colors.transparent, Colors.black],
                                    begin: Alignment.bottomLeft,
                                    end: Alignment.topLeft,
                                  )))),
                          Positioned(
                              top: widget.linewidth,
                              left: linesize,
                              child: Container(
                                  width: linesize,
                                  height: widget.linewidth,
                                  decoration: const BoxDecoration(
                                      gradient: LinearGradient(
                                    colors: [Colors.transparent, Colors.black],
                                    begin: Alignment.topLeft,
                                    end: Alignment.bottomLeft,
                                  )))),
                        ]),
                      ),
                    ),
                  ),
                  Positioned(
                    top: (widget.borderwidth / 2)-1,
                    left: (widget.borderwidth / 2)-1,
                    child: Container(
                      width: widget.boxwidth - widget.borderwidth,
                      height: widget.boxheight - widget.borderwidth,
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(widget.boxradius),
                        color: Colors.blue,
                      ),
                    ),
                  ),
                ]))));
  }
}
