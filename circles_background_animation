// Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:flutter/material.dart';
import 'dart:math';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;

  const MyHomePage({
    Key? key,
    required this.title,
  }) : super(key: key);

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<MyStatefulWidget> korok = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(widget.title),
        ),
        body: Stack(children: [
          ...korok,
          MyStatefulWidget(onFinished: (val) {
            
            setState(() {
              for (int i = 0; i < 20; i++) {
                korok.add(MyStatefulWidget(onFinished: (val) => null));
              }
            });
          }),
        ]));
  }
}

class MyStatefulWidget extends StatefulWidget {
  final Function(bool) onFinished;
  const MyStatefulWidget({Key? key, required this.onFinished})
      : super(key: key);

  @override
  State<MyStatefulWidget> createState() => _MyStatefulWidgetState();
}

class _MyStatefulWidgetState extends State<MyStatefulWidget>
    with SingleTickerProviderStateMixin {
  var rng = Random();
  late final AnimationController _controller = AnimationController(
    duration: const Duration(seconds: 2),
    vsync: this,
  )..forward().whenComplete(() {
      widget.onFinished(true);
    });

  late final Animation<Offset> _offsetAnimation = Tween<Offset>(
    begin: Offset((rng.nextDouble() * 50), rng.nextDouble()-2),
    end: Offset((rng.nextDouble() * 50), rng.nextDouble() + 30),
  ).animate(CurvedAnimation(
    parent: _controller,
    curve: Interval(rng.nextDouble(), 1.0, curve: Curves.linear),
  ));

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return SlideTransition(
      position: _offsetAnimation,
      child: const Padding(
        padding: EdgeInsets.all(8.0),
        child: Icon(Icons.circle, size: 10.0),
      ),
    );
  }
}
