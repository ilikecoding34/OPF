// Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

import 'package:flutter/material.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final String title;
  MyHomePage({Key? key, required this.title}) : super(key: key);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final ValueNotifier<int> _counter = ValueNotifier<int>(0);

  void _incrementCounter() {
    setState(() {
      _counter.value++;
    });
  }

  void csokken() {
    setState(() {
      _counter.value--;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ValueListenableBuilder<int>(
              builder: (BuildContext context, int value, Widget? child) {
                // This builder will only get called when the _counter
                // is updated.
                return Text('$value');
              },
              valueListenable: _counter,
            ),
            Text(
              'You have pushed the button this many times:',
            ),
            Count(_counter),
          ],
        ),
      ),
      floatingActionButton: Row(children: [
        FloatingActionButton(
          onPressed: _incrementCounter,
          tooltip: 'Increment',
          child: Icon(Icons.add),
        ),
        FloatingActionButton(
          onPressed: csokken,
          tooltip: 'csokken',
          child: Icon(Icons.remove),
        ),
      ]),
      bottomNavigationBar: Bottomwidget(_counter),
    );
  }
}

class Count extends StatelessWidget {
  Count(this.counter);
  ValueNotifier<int> counter;

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: () {
        counter.value--;
      },
      child: const Text('Enabled'),
    );
  }
}

/// This is the stateful widget that the main application instantiates.
class Bottomwidget extends StatefulWidget {
  Bottomwidget(this.counter);
  ValueNotifier<int> counter;

  @override
  State<Bottomwidget> createState() => BottomwidgetState();
}

/// This is the private State class that goes with MyStatefulWidget.
class BottomwidgetState extends State<Bottomwidget> {
  void _onItemTapped(int index) {
    setState(() {
      widget.counter.value = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<int>(
      builder: (BuildContext context, int value, Widget? child) {
        // This builder will only get called when the _counter
        // is updated.
        return BottomNavigationBar(
          items: const <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(Icons.home),
              label: 'Home',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.business),
              label: 'Business',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.school),
              label: 'School',
            ),
          ],
          currentIndex: widget.counter.value,
          selectedItemColor: Colors.amber[800],
          onTap: _onItemTapped,
        );
      },
      valueListenable: widget.counter,
    );
  }
}
